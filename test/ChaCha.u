\documentclass{article}
\usepackage[activate={true,nocompatibility}
           ,final
           ,tracking=true
           ,kerning=true
           ,spacing=true
           ,factor=1100
           ,stretch=10
           ,shrink=10
           ]{microtype}
\microtypecontext{spacing=nonfrench}
\usepackage{listings}

\begin{document}

Today we'll be implementing ChaCha20, a stream cipher capable of securely encrypting data, or generating random numbers.
Our library will focus on properly implementing the second use-case; we want to generate a stream of secure random numbers, but don't care about encrypting data.
ChaCha20 works by running twenty rounds (hence the name) of a "shuffle," or "dance" (hence the name) of the input numbers.
Its input is a 512-bit, or 64-byte, block of numbers, with a 16-byte constant, a 32-byte key, and a 12-byte nonce.
The key and nonce serve the same purpose, but allow a new stream to be generated from the same key, which can save processing for low-powered devices.

ChaCha20 is a variation of the Salsa20 stream cipher.
It was designed as a tiny performance enhancement to its predecessor, along with a mild strengthening of some flaws identified in Salsa20's first few years.

Let's take a look at the ChaCha dance first.

%% QuarterRound.u

Here we can see how the nonce, key, and constants are copied into the state block.
Because the key, nonce, and constant are laid out linearly, the result can be achieved with just three calls to {\tt memcpy}, which is very efficient.

%@ Initialization
void chacha_init(u32 k[8], u64 n[2], ChaCha o) {
  memcpy(o, "expand 32-byte k", 16);
  memcpy(o + 5, k, 32);
  memcpy(o + 13, n, 12);
}
%@

We have a wrapper here which allows a user to initialize their state with 48 continguous bytes, instead of two values.

%@ Seed ChaCha
%# Iterate N Rounds
%# Initialization

void chacha_seed(char *a, ChaCha o) {
  if (strnlen(a, 48) == 48) {
    u32 k[8] = {0};
    u64 n[2] = {0};
    memcpy(k, a, 32);
    memcpy(n, a + 32, 16);
    chacha_init(k, n, o);
  } else
    chacha_init((u32[8]){0}, (u64[2]){0}, o);
}
%@

Finally, here we see why we have one extra integer for our own state.
Because we're not using this to encrypt a stream, we can use the full 512 bits of random data every iteration, and only call the (relatively expensive) iteration when we run out of random numbers in the current block.
We wrap the number any time it grows too great, and call the next iteration; then return the lowest number in the state that hasn't been returned before.

%@ Generating random numbers
u32 chacha_rand(ChaCha o) {
  if (o[16] == 15) {
    chacha_next(o);
    o[16] = 0;
  } else
    o[16]++;
  return o[o[16]];
}
%@

Finally, there are some convenience typedefs for smaller character count and simpler lines.

%@ Typedefs
%# Includes

typedef uint8_t u8;
typedef uint32_t u32;
typedef uint64_t u64;
%@

And the required includes.

%@ Includes
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
%@

As a last step, here's the order in which we add the source blocks to the tangled file:\\

%# Seed ChaCha
%# Generating random numbers

\end{document}
