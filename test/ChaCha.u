Notes:
ChaCha and Salsa are ciphers--they're random number generators that are intended to be xor'd against data you want to encrypt. With shared secrets, you can decrypt the data with another xor.
The quarter round represents the entire set of operations that ChaCha and salsa use to generate these psuedorandom numbers.

There are arguments to use more complex operations, but ChaCha/Salsa chose the ones they did for speed, and because with the operations done as they are, they have provided reasonable security--eight rounds is considered unbreakable today, and the default is to use 20 rounds. Not only do we want it fast, we also want it CONSISTENTLY fast--if the timing of each operation changes depending on the input, which integer multiplication does indeed do, then secrets could possibly leak if the attacker can read timing information.

Another alternative not used in chacha/salsa is "s-boxes," which are lookup tables that take an 8-bit index and return a larger word. ChaCha/Salsa decided against it because of several reasons:
1. L1 cache pressure: lookup tables are huge, and take a lot of space on caches.
2. Equivalence of work done: S-boxes mangle input very thoroughly, but so do the integer operations that salsa does; there's no reason not to do this.
3. Timing attacks: related to the L1 cache pressure, retrieving things from different parts of the table actually takes different amounts of time--so, attackers can read them more easily.

There was a question on whether or not to reduce the number of rotations in the quarter round. It was decided to use rotations because it provides as much "diffusion" as two xors and two shifts, and is universally faster.

What is this? it's a psuedo-random number generator; it takes a seed and a nonce (a second seed), and generates a bytestream that can be xor'd with data that needs to be encrypted to encrypt it. It generates this stream in 64 byte blocks. There is no dependency between each block, so any number of blocks can be computed in parallel. The generation of the starting block is fixed-time--a simple memory copy operation and that's it.

What does it do?
the below, 8 times, a configurable number of times, on different parts of the cipher block.

Salsa decided on one type of quarter round repeated many times for L1-cache friendliness.

So, most of the decisions were made to be "good enough" or "best-in-class" for cryptographic randomness, but left out some "might be better" stuff in interest of speed.

ChaCha was made to improve on salsa both in speed and in diffusion.

%% QuarterRound.u

%@ Initialization
void chacha_init(u32 k[8], u64 n[2], ChaCha o) {
  memcpy(o, "expand 32-byte k", 16);
  memcpy(o + 5, k, 32);
  memcpy(o + 13, n, 12);
}
%@

%@ Seed ChaCha
%# Iterate N Rounds
%# Initialization

void chacha_seed(char *a, ChaCha o) {
  if (strnlen(a, 48) == 48) {
    u32 k[8] = {0};
    u64 n[2] = {0};
    memcpy(k, a, 32);
    memcpy(n, a + 32, 16);
    chacha_init(k, n, o);
  } else
    chacha_init((u32[8]){0}, (u64[2]){0}, o);
}
%@

%@ Generating random numbers
u32 chacha_rand(ChaCha o) {
  if (o[16] == 15) {
    chacha_next(o);
    o[16] = 0;
  } else
    o[16]++;
  return o[o[16]];
}
%@

%@ Typedefs
%# Includes

typedef uint8_t u8;
typedef uint32_t u32;
typedef uint64_t u64;
%@

%@ Includes
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
%@

%# Seed ChaCha
%# Generating random numbers
